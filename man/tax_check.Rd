% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tax_check.R
\name{tax_check}
\alias{tax_check}
\title{tax_check}
\usage{
tax_check(
  x,
  names,
  groups = NULL,
  sim = 80,
  start = 1,
  end = 0,
  pref = NULL,
  suff = NULL,
  verbose = FALSE
)
}
\arguments{
\item{x}{\code{dataframe}. A data.frame with named columns (e.g., 'species',
'genus', ect.). This must contain taxon names and optionally a further
column denoting the groups within which taxon names will be checked against
one another (e.g., 'family', 'order', ect.).}

\item{names}{\code{character}. The column name of the taxonomic names you
wish to check (e.g., 'genus')}

\item{groups}{\code{character}. The column name of the higher taxonomic
assignments in \code{x} you wish to group by. If \code{NULL} (default), name
comparison will be conducted within alphabetical groups.}

\item{sim}{\code{numeric}. The percentage similarity, above which potential
synonyms be reported.}

\item{start}{\code{numeric}. The number of matching characters at the
beginnings of two potential synonyms, below which the match will be
discarded. By default this value is set to 1 (i.e., the first letters must
match).}

\item{end}{\code{numeric}. The number of matching characters at the ending
of two potential synonyms, below which the match will be discarded. By
default this value is set to 0 (i.e., no matching required).}

\item{pref}{\code{character}. A vector of prefixes which may result in
spuriously high similarities. Synonyms will be filtered out out if only one
or the other bears a given prefix. The default is \code{NULL}.}

\item{suff}{\code{character}. A vector of suffixes which may result in
spuriously high similarities. Synonyms will be filtered out out if only one
or the other bears a given suffixes, The default is \code{NULL}.}

\item{verbose}{\code{logical}. Should the results of the non-letter
character check be reported to the user. If \code{TRUE}, the result will only be
reported if such characters are detected in the taxon names.}
}
\value{
\code{dataframe}. A data.frame with each row reporting a pair of
synonyms. The first column 'greater' contains the most common synonym in
each pair, the second column 'lesser' the least common synonym in each pair,
and the third column 'group' the higher group in which they occur (this may
be the alphabetical groupings default). If no matches were found for the
filtering parameters, \code{NULL} is returned instead.
}
\description{
A function for checking for potential spelling variations of the same
taxon name. These variations are checked for within higher taxonomic
groups or  within alphabetical groups if higher taxonomy is not provided
(the default assumption).
}
\details{
Where higher taxonomy is provided, but some entries are missing,
comparisons will be made within alphabetical groups. The function also
silently performs a check for non-letter characters which are not expected
to be present in correctly-formatted taxon names. This detection may be made
available to the user via the verbose argument.

Comparison is first performed using the Jaro string similarity metric, using
the \code{stringdist} function from the \code{stringdist} package. The Jaro metric can
be easily interpreted as percentage similarity, allowing low similarity
pairs to be filtered before the result is returned. Matches can then been
filtered out if they do not share a given number of starting and/or ending
letters. Penalisation by starting letters is analogous to Jaro-Winkler
distance, but purely Jaro distance is used instead as common Latin or Greek
prefixes and suffixes which result in high string similarities can also be
supplied, e.g. 'Pro', 'Proto'. High similarity matches resulting from high
similarity between such prefixes or suffixes will only be retained if two
potential synonyms share the same prefix or suffix (see example). Note that
this creates the assumption that spelling variations are not present among
the prefixes and suffixes, which is not always the case.

As all string distance metrics rely on approximate string matching,
different metrics can produce different results. This function uses Jaro
similarity as it was designed with short, typed strings in mind, but good
practice should include comparisons using multiple metrics, and ultimately
specific taxonomic vetting where possible. A more complete implementation
and workflow for cleaning taxonomic occurrence data is available in the
\code{fossilbrush} R package on CRAN.

#' @section Reference:
M. P. J. van der Loo (2014). The stringdist package for approximate string
matching. The R Journal 6, 111-122.
}
\section{Developer(s)}{

Joseph T. Flannery-Sutherland
}

\section{Reviewer(s)}{

Lewis A. Jones & XXX
}

\examples{
\dontrun{
# load occurrence data
data("tetrapods")

# define prefixes and suffixes
b_pref <- c("Neo", "Proto")
b_suff <- c("saurus", "suchus")

# run function
synon <- tax_check(tetrapods, names = "genus", groups = "family",
sim = 90, pref = b_pref, suff = b_suff)

}
}
